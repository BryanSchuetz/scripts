require 'net/http'

module Cartograph
  module OS
    def OS.windows?
      (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil
    end

    def OS.mac?
    (/darwin/ =~ RUBY_PLATFORM) != nil
    end

    def OS.unix?
      !OS.windows?
    end

    def OS.linux?
      OS.unix? and not OS.mac?
    end

    def OS.which?(cmd)
      exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
      ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
        exts.each { |ext|
          exe = File.join(path, "#{cmd}#{ext}")
          return exe if File.executable?(exe) && !File.directory?(exe)
        }
      end
      return nil
    end
  end
end

module Cartograph
  module Installer
    @gem_name = %[eol-cartograph]
    @gem_file = File.join($data_dir, "cartograph.gemfile")
    @gem_file_contents = <<-GEMFILE
      source 'https://rubygems.org'
      gem '#{@gem_name}'
    GEMFILE

    def self.write_gem_file()
      return if File.exists?(@gem_file)
      File.write(@gem_file, @gem_file_contents)
      yield if block_given?
    end

    def self.update?
      @response  ||= JSON.parse Net::HTTP.get(
        URI('https://rubygems.org/api/v1/gems/%s.json' % @gem_name))
      @available_version = Gem::Version.new(@response['version'])
      Log.out(@response) if debug?
      # check version
      update if Gem.loaded_specs[@gem_name].version < @available_version
    end

    def self.update()
      respond "[cartograph.update] downloading updates"
      bundler_output = `bundle install --gemfile=#{@gem_file}`
      respond(bundler_output) if debug?
    end

    def self.setup()
      write_gem_file {update}
    end

    def self.debug?
      Script.current.vars.include?("--debug")
    end
  end
end

Map.respond_to?(:load_json) or fail <<~ERROR
  your lich version is too old
  it must implement Map.load_json/1
ERROR

Gem::Version.new(RUBY_VERSION) > Gem::Version.new('2.5.0') or fail <<~ERROR
  Your version of Ruby: v#{RUBY_VERSION} is too old
  You must be using at least 2.5
ERROR

Cartograph::OS.which?("bundler")or fail <<~ERROR 
  your Ruby install did not install the bundler util
ERROR

# create the Gemfile
Cartograph::Installer.setup
# refresh paths so we can require the MapDB
Gem.clear_paths
# load the Cartograph gem for usage
require 'eol-cartograph'
# update is necessary
Cartograph::Installer.update?
# print some info to the end user
# todo: this should be wrapped in some sort of Thread-safe Mutex
Map.clear
Map.load_json(Cartograph.map_file)
respond("[cartograph.mapdb] loaded v%s" % Cartograph::VERSION)